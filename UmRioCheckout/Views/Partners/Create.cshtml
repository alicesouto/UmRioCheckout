@model UmRioCheckout.Models.Partner

@{
    ViewBag.Title = Resources.Donate;
}

<div class="columns is-mobile">
    <div class="column is-half background">
        <hero class="column">
            <div class="message-header">
                @Resources.ChooseYourLanguage
            </div>
            <div class="tile-ancestor is-mobile">
                <div class="tile-parent">
                    <label for="en-US">
                        <a href="?culture=en-US"><img src="~/Content/images/en-US.png" /></a>
                    </label>
                </div>
                <div class="tile-parent">
                    <label for="pt-BR">
                        <a href="?culture=pt-BR"><img src="~/Content/images/pt-BR.GIF" /></a>
                    </label>
                </div>
            </div>
        </hero>
    </div>
    <div class="column">
        <div class="title"> @ViewBag.Title </div>

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "donationForm" }))
        {
            @Html.AntiForgeryToken()

            if (ViewBag.ErrorMessage != null)
            {
                <div class="message"> @ViewBag.ErrorMessage </div>
            }

            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "label" })
            <p class="control">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "input" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </p>

            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "label" })
            <p class="control">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "input" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </p>

            @Html.LabelFor(model => model.Plan, htmlAttributes: new { @class = "label" })
            foreach (var Plan in (List<double>)ViewBag.DonationPlans)
            {
                <div class="radio-inline">
                    @Html.RadioButtonFor(model => model.Plan, (int)100 * @Plan, htmlAttributes: new { @class = "control" })
                    @Html.ValidationMessageFor(model => model.Plan, "", new { @class = "text-danger" })
                    @Resources.Currency@Plan/@Resources.Month
                </div>
            }

            <div class="column">
                <div class="card-wrapper"></div>
            </div>

            @Html.LabelFor(model => model.CreditCard.Number, htmlAttributes: new { @class = "label" })
            <p class="control">
                <input class="input" type="text" name="CreditCard.Number" />
                @Html.ValidationMessageFor(model => model.CreditCard.Number, "", new { @class = "text-danger" })
            </p>

            @Html.LabelFor(model => model.CreditCard.Name, htmlAttributes: new { @class = "label" })
            <p class="control">
                <input class="input" type="text" name="CreditCard.Name" />
                @Html.ValidationMessageFor(model => model.CreditCard.Name, "", new { @class = "text-danger" })
            </p>

            <div class="columns is-mobile">
                <div class="column is-half">
                    @Html.LabelFor(model => model.CreditCard.ExpiryDate, htmlAttributes: new { @class = "label" })
                    <p class="control">
                        <input class="input" type="text" name="CreditCard.ExpiryDate" />
                        @Html.ValidationMessageFor(model => model.CreditCard.ExpiryDate, "", new { @class = "text-danger" })
                    </p>
                </div>

                <div class="column is-half">
                    @Html.LabelFor(model => model.CreditCard.Cvv, htmlAttributes: new { @class = "label" })
                    <p class="control">
                        <input class="input" type="text" name="CreditCard.Cvv" />
                        @Html.ValidationMessageFor(model => model.CreditCard.Cvv, "", new { @class = "text-danger" })
                    </p>
                </div>
            </div>

            <div class="column is-offset-8">
                <p class="control">
                    <button class="button fa is-large is-primary">@Resources.Donate</button>
                </p>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/jquery.card.js")
    <script>
        $('#donationForm').card({
            container: '.card-wrapper',
            formSelectors: {
                numberInput: 'input[name="CreditCard.Number"]', // optional — default input[name="number"]
                expiryInput: 'input[name="CreditCard.ExpiryDate"]', // optional — default input[name="expiry"]
                cvcInput: 'input[name="CreditCard.Cvv"]', // optional — default input[name="cvc"]
                nameInput: 'input[name="CreditCard.Name"]', // optional — default input[name="cvc"]
            },
            debug: true
        });
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
